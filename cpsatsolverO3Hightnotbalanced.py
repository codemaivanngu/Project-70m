import os
import json
from ortools.sat.python import cp_model

# ============================
# 1. C·∫§U H√åNH CHUNG & H√ÄM LOAD D·ªÆ LI·ªÜU
# ============================
NUM_OF_VEHICLES = 4    # S·ªë xe (b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
NUM_OF_NODES = 30      # S·ªë node (s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ d·ªØ li·ªáu)
DISTANCE_SCALE = 1
CAPACITY_SCALE = 10
TIME_SCALE = 1
MAX_TRAVEL_DISTANCE = DISTANCE_SCALE * 1000
AVG_VELOCITY = DISTANCE_SCALE * 45
MAX_TRAVEL_TIME = TIME_SCALE * 24
MAX_WAITING_TIME = TIME_SCALE * 3
NUM_THREADS = 8        # S·ª≠ d·ª•ng ƒëa lu·ªìng

BASE_DIR = os.path.dirname(os.path.abspath(__file__))


def load_data():
    global NUM_OF_NODES, NUM_OF_VEHICLES
    distance_file = os.path.join(BASE_DIR, "data", "distance.json")
    request_file = os.path.join(BASE_DIR, "data", "requests.json")
    vehicle_file = os.path.join(BASE_DIR, "data", "vehicle.json")

    with open(distance_file, "r", encoding="utf-8") as f:
        distance_matrix = json.load(f)
    # Quy ƒë·ªïi ƒë∆°n v·ªã n·∫øu c·∫ßn
    distance_matrix = [[int(u * DISTANCE_SCALE) for u in row] for row in distance_matrix]
    NUM_OF_NODES = len(distance_matrix)

    with open(vehicle_file, "r", encoding="utf-8") as f:
        vehicle_capacities = json.load(f)
    vehicle_capacities = [int(u * CAPACITY_SCALE) for u in vehicle_capacities]
    NUM_OF_VEHICLES = len(vehicle_capacities)

    with open(request_file, "r", encoding="utf-8") as f:
        requests_data = json.load(f)

    demands = [0] * NUM_OF_NODES
    time_windows = [(0, 24 * TIME_SCALE)] * NUM_OF_NODES

    for request in requests_data:
        end_place = int(request[1][0])
        weight = request[2]
        if end_place >= NUM_OF_NODES:
            print(f"‚ö†Ô∏è Warning: end_place {end_place} exceeds NUM_OF_NODES ({NUM_OF_NODES}). Skipping request.")
            continue
        demands[end_place] += int(weight * 10)
        time_windows[end_place] = tuple(int(u * TIME_SCALE) for u in request[-1])

    return distance_matrix, demands, vehicle_capacities, time_windows

# ============================
# 2. M√î H√åNH CP-SAT CHO VRP (Multi-Vehicle)
# ============================
def solve_vrp_cp_sat(distance_matrix, demands, vehicle_capacities):
    model = cp_model.CpModel()

    N = NUM_OF_NODES   # s·ªë node (bao g·ªìm depot l√† node 0)
    V = NUM_OF_VEHICLES

    # T√≠nh M (big-M cho r√†ng bu·ªôc t·∫£i tr·ªçng), c√≥ th·ªÉ d√πng t·ªïng demand
    M = sum(demands) + 1

    # Bi·∫øn quy·∫øt ƒë·ªãnh: x[v,i,j] = 1 n·∫øu xe v di chuy·ªÉn t·ª´ i ƒë·∫øn j, 0 n·∫øu kh√¥ng.
    x = {}
    for v in range(V):
        for i in range(N):
            for j in range(N):
                if i != j:
                    x[v, i, j] = model.NewBoolVar(f"x[{v},{i},{j}]")

    # Bi·∫øn t·∫£i tr·ªçng: load[v,i] l√† l∆∞·ª£ng h√†ng tr√™n xe v khi ƒë·∫øn node i.
    load = {}
    for v in range(V):
        for i in range(N):
            # Gi√° tr·ªã t·∫£i c√≥ th·ªÉ t·ª´ 0 ƒë·∫øn capacity c·ªßa xe v.
            load[v, i] = model.NewIntVar(0, vehicle_capacities[v], f"load[{v},{i}]")

    # ============================
    # 2.1 R√†ng bu·ªôc: M·ªói kh√°ch h√†ng (node 1..N-1) ƒë∆∞·ª£c ph·ª•c v·ª• ƒë√∫ng 1 l·∫ßn.
    for j in range(1, N):
        model.Add(sum(x[v, i, j] for v in range(V) for i in range(N) if i != j) == 1)

    # ============================
    # 2.2 R√†ng bu·ªôc: Lu·ªìng xe (flow conservation) cho t·ª´ng xe.
    # T·ª´ depot (node 0), xe c√≥ th·ªÉ xu·∫•t ph√°t (xu·∫•t ph√°t = 1) v√† ph·∫£i v·ªÅ depot.
    for v in range(V):
        # Xe v kh·ªüi h√†nh t·ª´ depot.
        model.Add(sum(x[v, 0, j] for j in range(1, N)) <= 1)
        # Lu·ªìng t·∫°i depot: s·ªë xe xu·∫•t ph√°t = s·ªë xe k·∫øt th√∫c = 0 (ch√∫ng ta kh√¥ng b·∫Øt bu·ªôc ph·∫£i quay v·ªÅ depot trong m√¥ h√¨nh n√†y)
        # V·ªõi c√°c node kh√°c (kh√°ch h√†ng):
        for i in range(1, N):
            model.Add(sum(x[v, i, j] for j in range(N) if i != j) ==
                      sum(x[v, j, i] for j in range(N) if i != j))

    # ============================
    # 2.3 R√†ng bu·ªôc t·∫£i tr·ªçng v√† lo·∫°i b·ªè c√°c chu tr√¨nh ph·ª• (sub-tours)
    # N·∫øu xe v di chuy·ªÉn t·ª´ i ƒë·∫øn j, th√¨ t·∫£i t·∫°i j = t·∫£i t·∫°i i + demand c·ªßa j.
    for v in range(V):
        # T·∫°i depot, t·∫£i ban ƒë·∫ßu = 0.
        model.Add(load[v, 0] == 0)
        for i in range(N):
            for j in range(1, N):  # Ch·ªâ √°p d·ª•ng cho kh√°ch h√†ng
                if i != j:
                    # N·∫øu x[v,i,j] = 1 => load[v,j] == load[v,i] + demands[j]
                    # S·ª≠ d·ª•ng trick c·ªßa big-M:
                    model.Add(load[v, j] >= load[v, i] + demands[j] - M * (1 - x[v, i, j]))
                    model.Add(load[v, j] <= load[v, i] + demands[j] + M * (1 - x[v, i, j]))
                    # Ngo√†i ra, ƒë·∫£m b·∫£o load kh√¥ng gi·∫£m.
                    model.Add(load[v, j] >= demands[j]).OnlyEnforceIf(x[v, i, j])

    # ============================
    # 2.4 R√†ng bu·ªôc: T·∫£i tr·ªçng kh√¥ng v∆∞·ª£t qu√° kh·∫£ nƒÉng c·ªßa xe.
    for v in range(V):
        for i in range(N):
            model.Add(load[v, i] <= vehicle_capacities[v])

    # ============================
    # 2.5 R√†ng bu·ªôc: T·ªïng qu√£ng ƒë∆∞·ªùng di chuy·ªÉn c·ªßa t·∫•t c·∫£ c√°c xe kh√¥ng v∆∞·ª£t qu√° MAX_TRAVEL_DISTANCE.
    total_distance = sum(distance_matrix[i][j] * x[v, i, j]
                         for v in range(V) for i in range(N) for j in range(N) if i != j)
    model.Add(total_distance <= MAX_TRAVEL_DISTANCE)

    # ============================
    # 2.6 H√†m m·ª•c ti√™u: T·ªëi ∆∞u h√≥a t·ªïng qu√£ng ƒë∆∞·ªùng.
    model.Minimize(total_distance)

    # ============================
    # 2.7 C·∫•u h√¨nh solver v·ªõi ƒëa lu·ªìng
    solver = cp_model.CpSolver()
    solver.parameters.num_search_workers = NUM_THREADS
    solver.parameters.max_time_in_seconds = 60.0  # Gi·ªõi h·∫°n th·ªùi gian, c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh

    # ============================
    # 2.8 Gi·∫£i b√†i to√°n
    status = solver.Solve(model)

    if status in (cp_model.OPTIMAL, cp_model.FEASIBLE):
        print("‚úÖ T√¨m th·∫•y l·ªùi gi·∫£i!")
        # In l·ªùi gi·∫£i cho t·ª´ng xe:
        for v in range(V):
            print(f"\nüöõ Xe {v} route:")
            route = [0]
            current = 0
            while True:
                next_node = None
                for j in range(N):
                    if current != j and solver.Value(x[v, current, j]) == 1:
                        next_node = j
                        break
                if next_node is None:
                    break
                route.append(next_node)
                current = next_node
                if current == 0:
                    break
            if len(route) == 1:
                print("  Kh√¥ng c√≥ tuy·∫øn.")
            else:
                # In th√™m t·∫£i v√† kho·∫£ng c√°ch
                load_values = [solver.Value(load[v, i]) for i in route]
                print("  Route: ", route)
                print("  Load at nodes: ", load_values)
        print("\nüìè T·ªïng qu√£ng ƒë∆∞·ªùng:", solver.Value(total_distance), "km")
    else:
        print("‚ùå Kh√¥ng t√¨m th·∫•y l·ªùi gi·∫£i t·ªëi ∆∞u!")
    return solver, model

# ============================
# 3. CH·∫†Y CH∆Ø∆†NG TR√åNH
# ============================
if __name__ == "__main__":
    distance_matrix, demands, vehicle_capacities, time_windows = load_data()
    solve_vrp_cp_sat(distance_matrix, demands, vehicle_capacities)
